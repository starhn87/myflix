{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","prototype","PropTypes","string","isRequired","oneOfType","arrayOf","node","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","length","substring","HomePresenter","nowPlaying","popular","upcoming","loading","error","Helmet","Loader","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","console","log","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","ILink","DetailPresenter","result","backdrop_path","href","imdb_id","runtime","episode_runtime","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","render","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.84b5be5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.30f592a9.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child) {\r\n        margin-bottom: 50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top: 25px;\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, 125px);\r\n    grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node])\r\n}\r\n\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    margin-top: 20px;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    font-size: 28px;\r\n    justify-content: center;\r\n`;\r\n\r\nexport default () => \r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">\r\n            ⏰\r\n        </span>\r\n    </Container>","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100vw;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color: ${props => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n    <Container><Text color={color}>{text}</Text></Container>\r\n)\r\n\r\nMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n    height: 180px;\r\n    background-image: url(${props => props.bgUrl});\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position: center center;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    position: absolute;\r\n    bottom: 5px;\r\n    right: 5px;\r\n    opacity: 0;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    position: relative;\r\n    margin-bottom: 5px;\r\n    &:hover {\r\n        ${Image} {\r\n            opacity: 0.3;\r\n        }\r\n        ${Rating} {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    display: block;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size: 10px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/noPosterSmall.png\")} />\r\n                <Rating>\r\n                    <span role=\"img\" aria-label=\"rating\">⭐</span>\r\n                    {\" \"}\r\n                    {rating}/10\r\n                </Rating>\r\n            </ImageContainer>\r\n            <Title>{title.length > 15 ? `${title.substring(0,15)}...` : title}</Title>\r\n            <Year>{year}</Year>\r\n        </Container>\r\n    </Link>\r\n)\r\n\r\nPoster.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({\r\n    nowPlaying,\r\n    popular,\r\n    upcoming,\r\n    loading,\r\n    error\r\n}) => (\r\n        <>\r\n            <Helmet>\r\n                <title>Moives | Nomflix</title>\r\n            </Helmet>\r\n            {\r\n                loading ? (\r\n                    <Loader />\r\n                ) : (\r\n                    <Container>\r\n                        {nowPlaying && nowPlaying.length > 0 && (\r\n                            <Section title=\"Now Playing\">\r\n                                {nowPlaying.map(movie => (\r\n                                    <Poster\r\n                                        key={movie.id}\r\n                                        id={movie.id}\r\n                                        imageUrl={movie.poster_path}\r\n                                        title={movie.original_title}\r\n                                        rating={movie.vote_average}\r\n                                        year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                        isMovie={true}\r\n                                    />))}\r\n                            </Section>\r\n                        )}\r\n                        {upcoming && upcoming.length > 0 && (\r\n                            <Section title=\"Upcoming Movies\">\r\n                                {upcoming.map(movie => (\r\n                                    <Poster\r\n                                        key={movie.id}\r\n                                        id={movie.id}\r\n                                        imageUrl={movie.poster_path}\r\n                                        title={movie.original_title}\r\n                                        rating={movie.vote_average}\r\n                                        year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                        isMovie={true}\r\n                                    />))}\r\n                            </Section>\r\n                        )}\r\n                        {popular && popular.length > 0 && (\r\n                            <Section title=\"Popular Movies\">\r\n                                {popular.map(movie => (\r\n                                    <Poster\r\n                                        key={movie.id}\r\n                                        id={movie.id}\r\n                                        imageUrl={movie.poster_path}\r\n                                        title={movie.original_title}\r\n                                        rating={movie.vote_average}\r\n                                        year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                        isMovie={true}\r\n                                    />\r\n                                ))}\r\n                            </Section>\r\n                        )}\r\n                        {error && <Message color=\"#e74c3c\" text={error} />}\r\n                    </Container>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    upcoming: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nexport default HomePresenter;\r\n\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\",\r\n    params: {\r\n        api_key: \"bf0e271a0b3e98d631a06de42a7de616\",\r\n        language: \"en-US\"\r\n    }\r\n})\r\n\r\nexport const moviesApi = {\r\n    nowPlaying: () => api.get(\"movie/now_playing\"),\r\n    upcoming: () => api.get(\"movie/upcoming\"),\r\n    popular: () => api.get(\"movie/popular\"),\r\n    movieDetail: id => \r\n        api.get(`movie/${id}`, {\r\n            params: {\r\n                append_to_response: \"videos\"\r\n            }\r\n        }),\r\n    search: term =>\r\n        api.get(\"search/movie\", {\r\n            params: {\r\n                query: encodeURIComponent(term)\r\n            }\r\n        })\r\n}\r\n\r\nexport const tvApi = {\r\n    topRated: () => api.get(\"tv/top_rated\"),\r\n    popular: () => api.get(\"tv/popular\"),\r\n    airingToday: () => api.get(\"tv/airing_today\"),\r\n    showDetail: id =>\r\n        api.get(`tv/${id}`, {\r\n            params: {\r\n                append_to_response: \"videos\"\r\n            }\r\n        }),\r\n    search: term =>\r\n        api.get(\"search/tv\", {\r\n            params: {\r\n                query: encodeURIComponent(term)\r\n            }\r\n        })\r\n}\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        upcoming: null,\r\n        popular: null,\r\n        error: null,\r\n        loading: true\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: nowPlaying } } = await moviesApi.nowPlaying();\r\n            const { data: { results: upcoming } } = await moviesApi.upcoming();\r\n            const { data: { results: popular } } = await moviesApi.popular();\r\n            this.setState({\r\n                nowPlaying,\r\n                upcoming,\r\n                popular\r\n            })\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find movies information.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n        console.log(this.state);\r\n        return (\r\n            <HomePresenter\r\n                nowPlaying={nowPlaying}\r\n                upcoming={upcoming}\r\n                popular={popular}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n\r\nconst Container = styled.div`\r\n    padding: 0 20px;\r\n`;\r\n\r\nconst TVPresenter = ({\r\n    topRated,\r\n    popular,\r\n    airingToday,\r\n    loading,\r\n    error\r\n}) => (\r\n    <>\r\n        <Helmet>\r\n            <title>TV Shows | Nomflix</title>\r\n        </Helmet>\r\n        {\r\n        loading ? <Loader /> : (\r\n            <Container>\r\n                {topRated && topRated.length > 0 && (\r\n                    <Section title=\"Top Rated Shows\">\r\n                        {topRated.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular Shows\">\r\n                        {popular.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {airingToday && airingToday.length > 0 && (\r\n                    <Section title=\"Airing Today Shows\">\r\n                        {airingToday.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>\r\n        )}\r\n    </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n    topRated: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    airingToday: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nexport default TVPresenter;\r\n\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport { tvApi } from \"../../api\";\r\nimport TVPresenter from \"./TVPresenter\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        loading: true,\r\n        error: null\r\n    };\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: topRated } } = await tvApi.topRated();\r\n            const { data: { results: popular } } = await tvApi.popular();\r\n            const { data: { results: airingToday } } = await tvApi.airingToday();\r\n            this.setState({\r\n                topRated,\r\n                airingToday,\r\n                popular\r\n            })\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find TV information.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { topRated, popular, airingToday, loading, error } = this.state;\r\n        console.log(this.state);\r\n        return <TVPresenter\r\n            topRated={topRated}\r\n            popular={popular}\r\n            airingToday={airingToday}\r\n            loading={loading}\r\n            error={error}\r\n        />\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    padding: 0 20px;\r\n\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom: 50px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all: unset;\r\n    width: 100%;\r\n    font-size: 28px;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n    movieResults,\r\n    tvResults,\r\n    loading,\r\n    error,\r\n    searchTerm,\r\n    handleSubmit,\r\n    updateTerm\r\n}) => <Container>\r\n    <Helmet>\r\n        <title>Search | Nomflix</title>\r\n    </Helmet>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input placeholder=\"Seach Movies or TV Shows...\" value={searchTerm} onChange={updateTerm}>\r\n            </Input>\r\n        </Form>\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n                <>\r\n                    {movieResults && movieResults.length > 0 && (\r\n                        <Section title=\"Movie Results\">\r\n                            {movieResults.map(movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />))}\r\n                            ))\r\n                        </Section>\r\n                    )}\r\n                    {tvResults && tvResults.length > 0 && (\r\n                        <Section title=\"TV Shows Results\">\r\n                            {tvResults.map(show => (\r\n                                <Poster\r\n                                    key={show.id}\r\n                                    id={show.id}\r\n                                    imageUrl={show.poster_path}\r\n                                    title={show.original_name}\r\n                                    rating={show.vote_average}\r\n                                    year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                                />))}\r\n                            ))\r\n                        </Section>\r\n                    )}\r\n                    {error && <Message color=\"#e74c3c\" text={error} />}\r\n                    {tvResults\r\n                        && movieResults\r\n                        && tvResults.length === 0\r\n                        && movieResults.length === 0\r\n                        && <Message text=\"Nothing found\" color=\"grey\" />}\r\n                </>\r\n            )}\r\n    </Container>;\r\n\r\nSearchPresenter.propTypes = {\r\n    movieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string,\r\n    searchTerm: PropTypes.string,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchPresenter;\r\n\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        movieResults: null,\r\n        tvResults: null,\r\n        searchTerm: \"\",\r\n        loading: true,\r\n        error: null\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { searchTerm } = this.state;\r\n        if (searchTerm !== \"\") {\r\n            this.searchByTerm();\r\n        }\r\n    }\r\n\r\n    updateTerm = (event) => {\r\n        const {target: {value}} = event;\r\n        console.log(value);\r\n        this.setState({\r\n            searchTerm: value\r\n        });\r\n    }\r\n\r\n    searchByTerm = async () => {\r\n        const { searchTerm } = this.state;\r\n        try {\r\n            const { data: { results: movieResults } } = await moviesApi.search(searchTerm);\r\n            const { data: { results: tvResults } } = await tvApi.search(searchTerm);\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            })\r\n        } catch {\r\n            this.setState({ error: \"Can't find results.\" })\r\n        } finally {\r\n            this.setState({ loading: false })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n        return <SearchPresenter\r\n            movieResults={movieResults}\r\n            tvResults={tvResults}\r\n            searchTerm={searchTerm}\r\n            loading={loading}\r\n            error={error}\r\n            handleSubmit={this.handleSubmit}\r\n            updateTerm={this.updateTerm}\r\n        />\r\n    }\r\n}","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Header = styled.header`\n\tcolor: white;\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 50px;\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 0 10px;\n\tbackground-color: rgba(20, 20, 20, 0.8);\n\tz-index: 10;\n\tbox-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst List = styled.ul`\n    display: flex;\n`;\n\nconst Item = styled.li`\n\twidth: 50px;\n\ttext-align: center;\n\tborder-bottom: 5px solid ${props => (props.current ? \"#3498db\" : \"transparent\")};\n\ttransition: border-bottom .5s ease-in-out;\n`;\n\nconst SLink = styled(Link)`\n\theight: 50px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n`;\n\nexport default withRouter(({ location: { pathname } }) => (\n\t<Header>\n\t\t<List>\n\t\t\t<Item current={pathname === \"/\"}>\n\t\t\t\t<SLink to=\"/\">Movies</SLink>\n\t\t\t</Item>\n\t\t\t<Item current={pathname === \"/tv\"}>\n\t\t\t\t<SLink to=\"/tv\">TV</SLink>\n\t\t\t</Item>\n\t\t\t<Item current={pathname === \"/search\"}>\n\t\t\t\t<SLink to=\"/search\">Search</SLink>\n\t\t\t</Item>\n\t\t</List>\n\t</Header>\n));\n\n// 위의 것과 같은 기능을 한다\n// const HeaderC = (props) => (\n// \t<Header>\n// \t\t{console.log(props)}\n// \t\t<List>\n// \t\t\t<Item current={true}>\n// \t\t\t\t<SLink to=\"/\">Movies</SLink>\n// \t\t\t</Item>\n// \t\t\t<Item current={true}>\n// \t\t\t\t<SLink to=\"/tv\">TV</SLink>\n// \t\t\t</Item>\n// \t\t\t<Item current={true}>\n// \t\t\t\t<SLink to=\"/search\">Search</SLink>\n// \t\t\t</Item>\n// \t\t</List>\n// \t</Header>\n// );\n\n// export default withRouter(HeaderC);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Helmet from \"react-helmet\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    padding: 50px;\r\n    width: 100%;\r\n    height: calc(100vh - 50px);\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position: center center;\r\n    background-size: cover;\r\n    filter: blur(3px);\r\n    opacity: 0.5;\r\n    z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n    width: 30%;\r\n    height: 100%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position: center center;\r\n    background-size: cover;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n    width: 70%;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    float: left;\r\n    font-size: 32px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n    margin: 20px 0;\r\n    padding-top: 15px;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n    margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    width: 50%;\r\n    line-height: 1.5;\r\n    font-size: 12px;\r\n    opacity: 0.7;\r\n`;\r\n\r\nconst ILink = styled.a`\r\n\r\n`;\r\n\r\nconst DetailPresenter = ({\r\n    result,\r\n    loading,\r\n    error\r\n}) => (\r\n        loading ? (\r\n            <>\r\n                <Helmet>\r\n                    <title>Loading | Nomflix</title>\r\n                </Helmet>\r\n                <Loader />\r\n            </>\r\n        ) : (\r\n            error ? (\r\n            <Message color=\"#e74c3c\" text={error}></Message>\r\n            ) : (\r\n            <Container>\r\n                <Helmet>\r\n                    <title>{result.original_title ? result.original_title : result.original_name} | Nomflix</title>\r\n                </Helmet>\r\n                <Backdrop bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} />\r\n                <Content>\r\n                    <Cover bgImage={result.poster_path ? `https://image.tmdb.org/t/p/original${result.poster_path}` : require(\"../../assets/noPosterSmall.png\")} />\r\n                    <Data>\r\n                        <Title>{result.original_title ? result.original_title : result.original_name}</Title>\r\n                        <ILink href={`https://www.imdb.com/title/${result.imdb_id}`}>\r\n                            link\r\n                        </ILink>\r\n                        <ItemContainer>\r\n                            <Item>\r\n                                {result.release_date ? result.release_date.substring(0, 4) : result.first_air_date.substring(0, 4)}\r\n                            </Item>\r\n                            <Divider>•</Divider>\r\n                            <Item>\r\n                                {result.runtime ? result.runtime : result.episode_runtime} min\r\n                            </Item>\r\n                            <Divider>•</Divider>\r\n                            <Item>\r\n                                {result.genres && result.genres.map((genre, index) => index === result.genres.length - 1 ? genre.name : `${genre.name} /`)}\r\n                            </Item>\r\n                        </ItemContainer>\r\n                        <Overview>{result.overview}</Overview>\r\n                    </Data>\r\n                </Content>\r\n            </Container>\r\n    )));\r\n\r\nDetailPresenter.propTypes = {\r\n    result: PropTypes.object,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nexport default DetailPresenter;\r\n\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { location: { pathname } } = props;\r\n        this.state = {\r\n            result: null,\r\n            loading: true,\r\n            error: null,\r\n            isMovie: pathname.includes(\"/movie/\")\r\n        };\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const {\r\n            match: {\r\n                params: { id }\r\n            },\r\n            history: { push },\r\n        } = this.props;\r\n        const { isMovie } = this.state;\r\n        const parsedId = parseInt(id);\r\n        if (isNaN(parsedId)) {\r\n            return push(\"/\");\r\n        }\r\n        let result;\r\n        try {\r\n            if (isMovie) {\r\n                ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n            } else {\r\n                ({ data: result } = await tvApi.showDetail(parsedId));\r\n            }\r\n            console.log(result);\r\n        } catch {\r\n            this.setState({ error: \"Can't find anything.\" });\r\n        } finally {\r\n            this.setState({ loading: false, result });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { result, loading, error } = this.state;\r\n        return <DetailPresenter\r\n            result={result}\r\n            loading={loading}\r\n            error={error}\r\n        />\r\n    }\r\n}","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Home from \"../Routes/Home\";\r\nimport TV from \"../Routes/TV\";\r\nimport Search from \"../Routes/Search\";\r\nimport Header from \"./Header\";\r\nimport Detail from \"../Routes/Detail\";\r\n\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Home} />\r\n                <Route path=\"/tv\" component={TV} />\r\n                <Route path=\"/tv/popular\" render={() => <h1>Popular</h1>} />\r\n                <Route path=\"/search\" component={Search} />\r\n                <Route path=\"/movie/:id\" component={Detail} />\r\n                <Route path=\"/show/:id\" component={Detail} />\r\n                <Redirect from=\"*\" to={{Home}} />\r\n            </Switch>\r\n        </>\r\n    </Router>\r\n)","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n    body {\r\n        font-size: 12px;\r\n        background-color: rgba(20, 20, 20, 1);\r\n        color: white;\r\n        padding-top: 50px;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import React, { Component } from \"react\";\nimport Router from \"./Router\";\nimport GlobalStyles from \"./GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./api\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}